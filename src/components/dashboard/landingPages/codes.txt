import React, { useState, useEffect, useContext } from 'react';

// Assuming Navbar1's theme state is shared via context
const ThemeContext = React.createContext();

const Jobs = () => {
  const { isDark } = useContext(ThemeContext) || { isDark: false }; // Fallback if context not set
  const [searchTerm, setSearchTerm] = useState('');
  const [locationFilter, setLocationFilter] = useState('');
  const [jobTypeFilter, setJobTypeFilter] = useState('');
  const [selectedCompany, setSelectedCompany] = useState(null);

  // Dummy job data
  const jobList = [
    { id: 1, title: 'Software Engineer', company: 'TechCorp', location: 'Kigali, Rwanda', type: 'Full-Time', link: '/apply/1' },
    { id: 2, title: 'Data Analyst', company: 'DataSolutions', location: 'Nairobi, Kenya', type: 'Part-Time', link: '/apply/2' },
    { id: 3, title: 'UI/UX Designer', company: 'DesignHub', location: 'Dar es Salaam, Tanzania', type: 'Full-Time', link: '/apply/3' },
    { id: 4, title: 'Backend Developer', company: 'TechCorp', location: 'Kigali, Rwanda', type: 'Contract', link: '/apply/4' },
    { id: 5, title: 'Marketing Specialist', company: 'DataSolutions', location: 'Nairobi, Kenya', type: 'Full-Time', link: '/apply/5' },
  ];

  // Get unique companies, locations, and job types for filters
  const companies = [...new Set(jobList.map(job => job.company))];
  const locations = [...new Set(jobList.map(job => job.location))];
  const jobTypes = [...new Set(jobList.map(job => job.type))];

  // Filter jobs based on search, location, job type, and company
  const filteredJobs = jobList.filter(job => {
    const matchesSearch = job.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         job.company.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesLocation = !locationFilter || job.location === locationFilter;
    const matchesJobType = !jobTypeFilter || job.type === jobTypeFilter;
    const matchesCompany = !selectedCompany || job.company === selectedCompany;
    return matchesSearch && matchesLocation && matchesJobType && matchesCompany;
  });

  return (
    <div className="bg-white dark:bg-black-100 text-black dark:text-white px-6 py-8">
      <div className="max-w-7xl mx-auto">
        {/* Header and Search Section */}
        <div className="mb-6">
          <h2 className="text-3xl font-bold mb-4">Job Opportunities</h2>
          <div className="flex flex-col sm:flex-row gap-4">
            <input
              type="text"
              placeholder="Search jobs or companies..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="w-full sm:w-2/3 px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-800 dark:text-white"
            />
            <select
              value={locationFilter}
              onChange={(e) => setLocationFilter(e.target.value)}
              className="w-full sm:w-1/6 px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-800 dark:text-white"
            >
              <option value="">All Locations</option>
              {locations.map(loc => <option key={loc} value={loc}>{loc}</option>)}
            </select>
            <select
              value={jobTypeFilter}
              onChange={(e) => setJobTypeFilter(e.target.value)}
              className="w-full sm:w-1/6 px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-800 dark:text-white"
            >
              <option value="">All Job Types</option>
              {jobTypes.map(type => <option key={type} value={type}>{type}</option>)}
            </select>
          </div>
        </div>

        {/* Company Filter Section */}
        <div className="mb-6">
          <h3 className="text-xl font-semibold mb-2">Filter by Company</h3>
          <div className="flex flex-wrap gap-2">
            <button
              onClick={() => setSelectedCompany(null)}
              className={`px-4 py-2 rounded-md ${!selectedCompany ? 'bg-gray-200 dark:bg-gray-700' : 'bg-gray-100 dark:bg-gray-800'} hover:bg-gray-300 dark:hover:bg-gray-600 transition`}
            >
              All Companies
            </button>
            {companies.map((company) => (
              <button
                key={company}
                onClick={() => setSelectedCompany(company)}
                className={`px-4 py-2 rounded-md ${selectedCompany === company ? 'bg-gray-200 dark:bg-gray-700' : 'bg-gray-100 dark:bg-gray-800'} hover:bg-gray-300 dark:hover:bg-gray-600 transition`}
              >
                {company}
              </button>
            ))}
          </div>
        </div>

        {/* Job Listings */}
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
          {filteredJobs.map((job) => (
            <div
              key={job.id}
              className="bg-white dark:bg-gray-900  shadow-md p-6 rounded-lg hover:shadow-lg transition-shadow"
            >

              <img src="https://via.placeholder.com/50" alt="Company Logo" className="w-12 h-12 rounded-full mb-4" />
              <h3 className="text-xl font-semibold mb-2">{job.title}</h3>
              <p className="text-gray-600 dark:text-gray-400 mb-2">{job.company}</p>
              <p className="text-gray-500 dark:text-gray-500 text-sm mb-4">{job.location}</p>
              <p className="text-gray-500 dark:text-gray-500 text-sm mb-4">{job.type}</p>
              <a
                href={job.link} style={{ background: "linear-gradient(to bottom, #b3f0ff, #74d9f7)",backgroundBlendMode: "overlay" , hover : "linear-gradient(to bottom, #d6e6ef, #62d0f2)"}}
                className="inline-block px-4 py-2 text-black-100 dark:text-black rounded-full hover:bg-gray-800 dark:hover:bg-gray-200 transition"
              >
                Apply Now
              </a>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

// Example context provider (to be used in App.jsx)
const ThemeProvider = ({ children }) => {
  const [isDark, setIsDark] = useState(false);

  useEffect(() => {
    const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
    setIsDark(prefersDark);
  }, []);

  return (
    <ThemeContext.Provider value={{ isDark, setIsDark }}>
      {children}
    </ThemeContext.Provider>
  );
};

export { Jobs, ThemeProvider };